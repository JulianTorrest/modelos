import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
import io
import google.generativeai as genai

# --- Configuraci√≥n de la P√°gina de Streamlit ---
st.set_page_config(
    page_title="An√°lisis y Predicci√≥n de Baloto con Gemini AI",
    page_icon="üé∞",
    layout="wide"
)

st.title("üé∞ An√°lisis Exploratorio de Datos y Predicci√≥n de Baloto con Gemini AI üá®üá¥")
st.write("Bienvenido al panel interactivo de an√°lisis de los resultados hist√≥ricos del Baloto colombiano. Explora tendencias pasadas y experimenta con la IA de Gemini para posibles predicciones o insights.")

# --- Configuraci√≥n de la API Key de Gemini ---
# ADVERTENCIA: La API Key est√° hardcodeada directamente en el c√≥digo.
# Esto NO es una pr√°ctica recomendada para producci√≥n debido a riesgos de seguridad.
# Sin embargo, se hace a petici√≥n expl√≠cita.
gemini_api_key = "AIzaSyAo1mZnBvslWoUKot7svYIo2K3fZIrLgRk" # ¬°TU API KEY AQU√ç!

try:
    genai.configure(api_key=gemini_api_key)
    model = genai.GenerativeModel('gemini-pro')
    st.success("API de Gemini configurada exitosamente (API Key incrustada en el c√≥digo).")
except Exception as e:
    st.error(f"Error al configurar la API de Gemini: {e}")
    st.warning("La funcionalidad de Gemini AI podr√≠a no estar disponible.")
    model = None

# --- URL del archivo CSV en GitHub ---
url = "https://raw.githubusercontent.com/JulianTorrest/modelos/refs/heads/main/Baloto.csv"

# --- Funci√≥n para Cargar y Preprocesar los Datos (con cach√©) ---
@st.cache_data
def load_data(data_url):
    """
    Carga el archivo CSV desde la URL, convierte la columna de fecha
    y extrae el a√±o, mes y d√≠a.
    Utiliza cach√© para evitar recargas innecesarias.
    """
    try:
        df = pd.read_csv(data_url)
        # Convertir la columna 'Fecha' a formato de fecha (d√≠a/mes/a√±o)
        df['Fecha'] = pd.to_datetime(df['Fecha'], format='%d/%m/%Y')
        # Extraer el a√±o, mes y d√≠a para posibles an√°lisis
        df['A√±o'] = df['Fecha'].dt.year
        df['Mes'] = df['Fecha'].dt.month
        df['Dia'] = df['Fecha'].dt.day
        # No se calcula SumaBalotas ya que el an√°lisis ha cambiado
        return df
    except Exception as e:
        st.error(f"Error al cargar el archivo desde {data_url}: {e}")
        return pd.DataFrame() # Retorna un DataFrame vac√≠o en caso de error

# --- Cargar los datos ---
df = load_data(url)

# --- Verificar si los datos se cargaron correctamente ---
if not df.empty:
    st.success("¬°Datos de Baloto cargados exitosamente! Fecha del √∫ltimo sorteo registrado: " + df['Fecha'].max().strftime('%d/%m/%Y'))

    # --- Pesta√±as para organizar el contenido ---
    tab1, tab2, tab3 = st.tabs(["üìä An√°lisis Exploratorio", "ü§ñ Predicci√≥n/Insights con IA", "‚ÑπÔ∏è Acerca de"])

    with tab1:
        st.header("An√°lisis Exploratorio de Datos Hist√≥ricos")

        # --- Secci√≥n 1: Primeras Filas y Estructura del DataFrame ---
        st.subheader("üîç Primeras Filas del Conjunto de Datos")
        st.dataframe(df.head())

        st.subheader("üìä Informaci√≥n General y Estad√≠sticas Descriptivas")
        st.write("Resumen de los tipos de datos, valores no nulos y uso de memoria.")
        # Captura la salida de df.info() en un buffer de texto y la muestra
        buffer = io.StringIO()
        df.info(buf=buffer)
        s = buffer.getvalue()
        st.text(s)

        st.write("Estad√≠sticas descriptivas b√°sicas para las balotas:")
        st.dataframe(df[['Balota 1', 'Balota 2', 'Balota 3', 'Balota 4', 'Balota 5', 'SuperBalota']].describe())

        # --- Secci√≥n 2: Distribuci√≥n de Frecuencia de las Balotas ---
        st.subheader("üìà Distribuci√≥n de Frecuencia de las Balotas")
        st.write("Estos histogramas muestran la frecuencia con la que ha aparecido cada n√∫mero **en su respectiva posici√≥n de balota** y en la SuperBalota. Recuerda que las balotas 1 a 5 est√°n ordenadas num√©ricamente.")

        # Crear una figura con m√∫ltiples subplots
        fig1, axes1 = plt.subplots(2, 3, figsize=(18, 12))
        axes1 = axes1.flatten() # Aplanar el array de ejes para una f√°cil iteraci√≥n

        # Distribuci√≥n de las 5 Balotas Regulares
        for i in range(1, 6):
            sns.histplot(df[f'Balota {i}'], bins=range(1, 44), kde=True, ax=axes1[i-1], color='skyblue')
            axes1[i-1].set_title(f'Distribuci√≥n Balota {i} (1-43)')
            axes1[i-1].set_xlabel('N√∫mero')
            axes1[i-1].set_ylabel('Frecuencia')
            axes1[i-1].set_xticks(range(1, 44, 4)) # Mostrar ticks cada 4 n√∫meros para claridad

        # Distribuci√≥n de la SuperBalota
        sns.histplot(df['SuperBalota'], bins=range(1, 17), kde=True, ax=axes1[5], color='lightcoral')
        axes1[5].set_title('Distribuci√≥n SuperBalota (1-16)')
        axes1[5].set_xlabel('N√∫mero')
        axes1[5].set_ylabel('Frecuencia')
        axes1[5].set_xticks(range(1, 17))

        plt.tight_layout()
        st.pyplot(fig1)

        # --- Secci√≥n 3: Balotas M√°s Frecuentes (Global y SuperBalota) ---
        st.subheader("‚≠ê Balotas M√°s Frecuentes")
        st.write("Identifica los n√∫meros que han sido los m√°s 'afortunados' en la historia del Baloto, considerando todas las posiciones para las balotas regulares.")

        col1, col2 = st.columns(2)

        with col1:
            st.markdown("##### Top 10 Balotas Regulares (Global)")
            # Concatena todas las balotas regulares para contar la frecuencia global
            all_balotas = pd.concat([df['Balota 1'], df['Balota 2'], df['Balota 3'], df['Balota 4'], df['Balota 5']])
            top_balotas = all_balotas.value_counts().head(10)
            fig2, ax2 = plt.subplots(figsize=(10, 6))
            sns.barplot(x=top_balotas.index, y=top_balotas.values, palette='viridis', ax=ax2, hue=top_balotas.index, legend=False)
            ax2.set_title('Top 10 Balotas M√°s Frecuentes (1-43)')
            ax2.set_xlabel('N√∫mero de Balota')
            ax2.set_ylabel('Frecuencia')
            st.pyplot(fig2)

        with col2:
            st.markdown("##### Top 10 SuperBalotas")
            top_superbalotas = df['SuperBalota'].value_counts().head(10)
            fig3, ax3 = plt.subplots(figsize=(10, 6))
            sns.barplot(x=top_superbalotas.index, y=top_superbalotas.values, palette='magma', ax=ax3, hue=top_superbalotas.index, legend=False)
            ax3.set_title('Top 10 SuperBalotas M√°s Frecuentes (1-16)')
            ax3.set_xlabel('N√∫mero de SuperBalota')
            ax3.set_ylabel('Frecuencia')
            st.pyplot(fig3)

        # --- Secci√≥n 4: An√°lisis de Correlaci√≥n ---
        st.subheader("üîó Matriz de Correlaci√≥n entre Balotas")
        st.write("Aunque las balotas de un sorteo individual son independientes, esta matriz muestra si existe alguna correlaci√≥n num√©rica **observada** entre las *posiciones* de las balotas a lo largo del tiempo, teniendo en cuenta su orden ascendente.")
        numeric_cols = ['Balota 1', 'Balota 2', 'Balota 3', 'Balota 4', 'Balota 5', 'SuperBalota']
        correlation_matrix = df[numeric_cols].corr()

        fig4, ax4 = plt.subplots(figsize=(8, 6))
        sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", ax=ax4)
        ax4.set_title('Matriz de Correlaci√≥n entre Balotas')
        st.pyplot(fig4)

        # --- Secci√≥n 5: Tendencia del Promedio de Cada Balota por A√±o ---
        st.subheader("‚è≥ Tendencia Anual del Promedio de Cada Balota")
        st.write("Esta gr√°fica muestra c√≥mo ha variado el **promedio de los n√∫meros** para cada balota (Balota 1 a Balota 5) y la SuperBalota a lo largo de los a√±os. Esto puede indicar si los n√∫meros tendieron a ser m√°s altos o bajos en ciertos a√±os para cada posici√≥n.")

        # Calcular el promedio de cada balota por a√±o
        df_avg_by_year = df.groupby('A√±o')[['Balota 1', 'Balota 2', 'Balota 3', 'Balota 4', 'Balota 5', 'SuperBalota']].mean().reset_index()

        fig5, ax5 = plt.subplots(figsize=(14, 7))
        # Melt el dataframe para usar Seaborn.lineplot con m√∫ltiples l√≠neas
        df_avg_by_year_melted = df_avg_by_year.melt('A√±o', var_name='Balota', value_name='Promedio')
        sns.lineplot(x='A√±o', y='Promedio', hue='Balota', data=df_avg_by_year_melted, marker='o', ax=ax5)
        ax5.set_title('Promedio Anual de los N√∫meros para Cada Balota')
        ax5.set_xlabel('A√±o')
        ax5.set_ylabel('Promedio del N√∫mero')
        ax5.grid(True, linestyle='--', alpha=0.7)
        st.pyplot(fig5)

        # --- Secci√≥n 6: Distribuci√≥n de N√∫meros por Balota y A√±o (Boxplots) ---
        st.subheader("üìÖ Distribuci√≥n Anual de N√∫meros por Balota")
        st.write("Estos diagramas de caja muestran la distribuci√≥n de los n√∫meros para cada balota (Balota 1 a Balota 5) y la SuperBalota, agrupados por a√±o. Puedes observar la mediana, los cuartiles y los valores at√≠picos.")

        # Crear subplots para cada balota + SuperBalota
        fig6, axes6 = plt.subplots(2, 3, figsize=(18, 12))
        axes6 = axes6.flatten()

        balota_cols = ['Balota 1', 'Balota 2', 'Balota 3', 'Balota 4', 'Balota 5', 'SuperBalota']
        for i, col in enumerate(balota_cols):
            sns.boxplot(x='A√±o', y=col, data=df, ax=axes6[i], palette='Pastel1')
            axes6[i].set_title(f'Distribuci√≥n Anual de {col}')
            axes6[i].set_xlabel('A√±o')
            axes6[i].set_ylabel('N√∫mero')
            axes6[i].tick_params(axis='x', rotation=45) # Rotar etiquetas para a√±os si son muchos

        plt.tight_layout()
        st.pyplot(fig6)

    with tab2:
        st.header("ü§ñ Interacci√≥n con Gemini AI")
        st.write("Aqu√≠ puedes usar la inteligencia artificial de Google Gemini para obtener insights, predicciones o an√°lisis adicionales basados en los datos del Baloto.")

        if model:
            st.subheader("Generar una 'predicci√≥n' o insight")
            st.markdown("""
            **Descargo de responsabilidad:** La IA de Gemini puede generar texto predictivo basado en patrones, pero **no puede predecir n√∫meros de loter√≠a reales**. Los sorteos de loter√≠a son eventos de probabilidad puramente aleatorios.
            """)

            # Obtener los √∫ltimos resultados para el prompt
            latest_results = df.sort_values(by='Fecha', ascending=False).head(5)
            latest_results_str = latest_results.to_string(index=False)

            prompt = st.text_area(
                "Ingresa tu pregunta o solicitud para Gemini sobre los datos del Baloto:",
                f"Basado en los siguientes √∫ltimos resultados del Baloto:\n\n{latest_results_str}\n\n"
                "¬øPodr√≠as identificar alguna tendencia interesante o sugerir un posible conjunto de n√∫meros (puramente por curiosidad y sin garant√≠a de ser ganadores) y justificar tu razonamiento? Ten en cuenta que las balotas 1 a 5 est√°n ordenadas num√©ricamente y la SuperBalota es independiente. Considera los rangos de balotas (1-43) y SuperBalota (1-16)."
            )

            if st.button("Generar con Gemini"):
                with st.spinner("Generando respuesta..."):
                    try:
                        response = model.generate_content(prompt)
                        st.markdown("**Respuesta de Gemini:**")
                        st.write(response.text)
                    except Exception as e:
                        st.error(f"Error al comunicarse con la API de Gemini: {e}")
                        st.info("Esto puede deberse a un l√≠mite de cuota, un problema de red, o un problema con el prompt.")
        else:
            st.warning("La funcionalidad de Gemini AI no est√° disponible debido a un error de configuraci√≥n de la API Key.")

    with tab3:
        st.header("‚ÑπÔ∏è Acerca de esta Aplicaci√≥n")
        st.write("""
        Esta aplicaci√≥n de Streamlit fue creada para realizar un An√°lisis Exploratorio de Datos (EDA) sobre los resultados hist√≥ricos del Baloto colombiano.
        Los datos se cargan directamente desde un archivo CSV alojado en GitHub.

        **Caracter√≠sticas Clave:**
        * Visualizaci√≥n de distribuciones de frecuencia de balotas individuales y SuperBalota.
        * Identificaci√≥n de las balotas m√°s frecuentes.
        * An√°lisis de correlaci√≥n entre las posiciones de las balotas.
        * **Nuevas tendencias:** An√°lisis del promedio y la distribuci√≥n de n√∫meros para *cada balota individualmente* a lo largo del tiempo y por a√±o.
        * **Integraci√≥n con Google Gemini AI** para explorar insights adicionales y "predicciones" (puramente con fines ilustrativos y de entretenimiento, ya que las loter√≠as son aleatorias).

        **Desarrollado por:** Julian Torres (con asistencia de un modelo de lenguaje de Google).
        """)
        st.image("https://upload.wikimedia.org/wikipedia/commons/thumb/c/c5/Google_Gemini_logo.svg/1200px-Google_Gemini_logo.svg.png", width=150)
        st.write("Los resultados de Baloto son aleatorios. Por favor, juega responsablemente.")

else:
    st.error("No se pudieron cargar los datos del Baloto. Por favor, aseg√∫rate de que la URL sea correcta y el archivo est√© accesible.")
    st.info("Intenta revisar la URL del archivo en tu repositorio de GitHub o la conexi√≥n a internet. Si el problema persiste, verifica el formato del CSV.")

st.markdown("---")
st.write("¬°Gracias por usar la aplicaci√≥n!")
